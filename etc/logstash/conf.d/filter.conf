# Code by Joachim Hermans
# Creating a filter with regex and grok for syslog formats

filter {
# Checking if there is syslog in the tag
        if "syslog" in [tags] or "beats" in [tags] {
                syslog_pri { }
                #  grok : take apart the following "<number>" "timestamp" "All data till :" "rest of the message"
                grok {
                #Get everything untill you find a returnkey, <number> in syslog_event, timestamp in syslog_time, next part untill : in temp and all the rest in temp_message
                        match => { "message" => "(<%{BASE10NUM:syslog_event_id}>)*?%{SYSLOGTIMESTAMP:syslog_time} %{DATA:temp}: (?<temp_message>(.+))" }
                }
                # If temp_message we matched previously starts with "text[digits]:" or "text:" or "space:"
                # Filtered out the IPfabric leafs. REGEX: check for words but no digits untill [^\d\W]+ (digits just words)
                if [temp_message] =~ /.+^( )?\w+\[\d+\]:|^( )?[^\d\W]+:/ {
                        grok {
                        match => { "temp" => "%{DATA:syslog_prefix} %{GREEDYDATA:syslog_hostname}" }
                        }
                        grok {
                        match => { "temp_message" => "%{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
                        }
                        mutate {
                                remove_field => [ "temp" ]
                                remove_field => [ "temp_message" ]
                                add_tag => [ "leaf" ]
                                remove_tag => [ "syslog" ]
                        }
                #check temp for "word word word([digits])" the "[digits]" and ":" are optional
                } else if [temp] =~ /(^([\w\/-]+ ){2,2}([^\[|:|\s]*)?(\[\d+\])?)(:)?/ {
                        grok {
                                            #Regex=Get everything befor/untill "[" ":" "\s"
                        match => { "temp" => "%{DATA:syslog_slot}/%{DATA:syslog_hostname} %{DATA:useless} (?<syslog_program>([^\[|:|\s]*))(\[%{POSINT:syslog_pid}\])?(:)?"}
                        }
                        mutate {
                                remove_field => [ "temp" ]
                                remove_field => [ "useless" ]
                                rename => { "temp_message" => "syslog_message" }
                                add_tag => [ "f5logs" ]
                                remove_tag => [ "syslog" ]
                        }
                # check temp for "word word[digits]:"
                } else if [temp] =~ /(^[\w\/-]+|\d+\.\d+\.\d+\.\d+) ([^\[|\s|:]*)(\[\d+\])?(:)?/ {
                        grok{
                        match => { "temp" => "%{DATA:syslog_hostname} (?<syslog_program>([^\[|:|\s]*))(\[%{POSINT:syslog_pid}\])?(:)?"}
                        }
                        mutate {
                                remove_field => [ "temp" ]
                                rename => { "temp_message" => "syslog_message" }
                        }
                } else {

                        mutate {
                                add_tag => ["PARSEFAILURE ON ALL IF'S"]
                        }
                }
        } else if "routecollector" in [tags] {
                        mutate {
                                add_tag => [ "RRcollector" ]
                                remove_tag => [ "routecollector" ]
                        }
        } else {
                mutate {
                        add_tag => [ "not-RR-or-Syslog" ]
                }
        }
}
